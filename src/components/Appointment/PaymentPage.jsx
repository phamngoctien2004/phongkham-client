import { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { toast } from 'sonner';
import appointmentService from '../../services/appointmentService';
import websocketService from '../../services/websocketService';
import './Appointment.css';

const PaymentPage = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const [loading, setLoading] = useState(true);
    const [appointment, setAppointment] = useState(null);
    const subscriptionRef = useRef(null);
    const wsConnectedRef = useRef(false);

    useEffect(() => {
        loadAppointmentDetail();

        // Ki·ªÉm tra xem c√≥ pending appointment trong localStorage kh√¥ng
        checkPendingAppointment();

        // K·∫øt n·ªëi WebSocket v√† subscribe ƒë·∫øn th√¥ng b√°o thanh to√°n
        connectWebSocket();

        // Cleanup khi component unmount
        return () => {
            if (subscriptionRef.current) {
                websocketService.unsubscribeFromAppointment(id);
                subscriptionRef.current = null;
            }
        };
    }, [id]);

    const checkPendingAppointment = () => {
        try {
            const pendingAppointments = JSON.parse(localStorage.getItem('pendingAppointments') || '[]');

            // X√≥a c√°c appointment c≈© h∆°n 24 gi·ªù
            const now = new Date();
            const validAppointments = pendingAppointments.filter(apt => {
                const timestamp = new Date(apt.timestamp);
                const hoursDiff = (now - timestamp) / (1000 * 60 * 60);
                return hoursDiff < 24; // Ch·ªâ gi·ªØ l·∫°i appointment trong v√≤ng 24 gi·ªù
            });

            // C·∫≠p nh·∫≠t l·∫°i localStorage n·∫øu c√≥ thay ƒë·ªïi
            if (validAppointments.length !== pendingAppointments.length) {
                localStorage.setItem('pendingAppointments', JSON.stringify(validAppointments));
            }

            const currentAppointment = validAppointments.find(
                apt => apt.id === parseInt(id)
            );

            if (currentAppointment) {
                console.log('Found pending appointment in localStorage:', currentAppointment);
                // Appointment v·∫´n ƒëang ch·ªù thanh to√°n, s·∫Ω subscribe ƒë·ªÉ nh·∫≠n th√¥ng b√°o
            }
        } catch (error) {
            console.error('Error checking pending appointment:', error);
        }
    };

    const connectWebSocket = () => {
        // K·∫øt n·ªëi WebSocket
        websocketService.connect(
            () => {
                console.log('[PaymentPage] ‚úÖ WebSocket connected successfully');
                wsConnectedRef.current = true;

                console.log('[PaymentPage] Subscribing to appointment:', id);

                // Subscribe ƒë·∫øn topic nh·∫≠n th√¥ng b√°o thanh to√°n
                const subscription = websocketService.subscribeToAppointmentPayment(
                    id,
                    handlePaymentNotification
                );
                subscriptionRef.current = subscription;

                console.log('[PaymentPage] Subscription created:', subscription ? 'SUCCESS' : 'FAILED');
            },
            (error) => {
                console.error('[PaymentPage] ‚ùå WebSocket connection error:', error);
                wsConnectedRef.current = false;

                // Th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y
                setTimeout(() => {
                    if (!wsConnectedRef.current) {
                        console.log('[PaymentPage] Attempting to reconnect...');
                        connectWebSocket();
                    }
                }, 5000);
            }
        );
    };

    const handlePaymentNotification = (event) => {
        console.log('[PaymentPage] üéâ Payment notification received!');
        console.log('[PaymentPage] Event object:', event);
        console.log('[PaymentPage] Event type:', event.event);
        console.log('[PaymentPage] Message:', event.message);
        console.log('[PaymentPage] AppointmentId:', event.appointmentId);

        // Ki·ªÉm tra event type - Backend g·ª≠i event: "SUCCESS"
        if (event.event === 'SUCCESS' || event.event === 'PAYMENT_SUCCESS' || event.eventType === 'PAYMENT_SUCCESS') {
            console.log('[PaymentPage] ‚úÖ Payment SUCCESS detected!');
            toast.success('Thanh to√°n th√†nh c√¥ng!');

            // X√≥a appointment kh·ªèi localStorage
            removePendingAppointment(id);

            // ƒê·ª£i 3 gi√¢y ƒë·ªÉ user th·∫•y toast, sau ƒë√≥ reload l·∫°i trang ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i
            setTimeout(() => {
                console.log('[PaymentPage] Reloading appointment detail...');
                loadAppointmentDetail();

                // Unsubscribe kh·ªèi WebSocket v√¨ ƒë√£ thanh to√°n xong
                if (subscriptionRef.current) {
                    websocketService.unsubscribeFromAppointment(id);
                    subscriptionRef.current = null;
                }
            }, 3000);
        } else {
            console.log('[PaymentPage] ‚ö†Ô∏è Unknown event type:', event.event);
        }
    };

    const removePendingAppointment = (appointmentId) => {
        try {
            const pendingAppointments = JSON.parse(localStorage.getItem('pendingAppointments') || '[]');
            const updatedAppointments = pendingAppointments.filter(
                apt => apt.id !== parseInt(appointmentId)
            );
            localStorage.setItem('pendingAppointments', JSON.stringify(updatedAppointments));
        } catch (error) {
            console.error('Error removing pending appointment:', error);
        }
    };

    const loadAppointmentDetail = async () => {
        try {
            setLoading(true);
            const response = await appointmentService.getAppointmentDetail(id);
            setAppointment(response.data);

            // Ki·ªÉm tra v√† x√≥a kh·ªèi localStorage n·∫øu ƒë√£ thanh to√°n ho·∫∑c b·ªã h·ªßy
            const status = response.data?.status;
            if (status === 'DA_THANH_TOAN' || status === 'HUY' || status === 'DA_HUY' || status === 'HOAN_THANH') {
                removePendingAppointment(id);

                // N·∫øu ƒë√£ thanh to√°n, c√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o
                if (status === 'DA_THANH_TOAN') {
                    // Kh√¥ng toast ·ªü ƒë√¢y v√¨ c√≥ th·ªÉ ƒë√£ toast t·ª´ WebSocket
                    console.log('Appointment already paid');
                }
            }

            // Payment ƒë√£ ƒë∆∞·ª£c t·∫°o ·ªü b∆∞·ªõc ƒë·∫∑t l·ªãch, ch·ªâ c·∫ßn hi·ªÉn th·ªã th√¥ng tin
            // N·∫øu c√≥ invoiceCode trong response th√¨ ƒë√£ c√≥ payment
        } catch (error) {
            toast.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin l·ªãch h·∫πn');
            console.error(error);
        } finally {
            setLoading(false);
        }
    };

    if (loading) {
        return (
            <div className="payment-page">
                <div className="container">
                    <div className="loading-spinner">
                        <i className="bi bi-hourglass-split"></i>
                        <p>ƒêang t·∫£i th√¥ng tin...</p>
                    </div>
                </div>
            </div>
        );
    }

    if (!appointment) {
        return (
            <div className="payment-page">
                <div className="container">
                    <div className="error-message">
                        <i className="bi bi-exclamation-triangle"></i>
                        <h3>Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªãch h·∫πn</h3>
                        <button className="btn btn-primary" onClick={() => navigate('/')}>
                            V·ªÅ trang ch·ªß
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    const { patientResponse, doctorResponse, healthPlanResponse, date, time, symptoms, totalAmount, status, qr, invoiceCode } = appointment;

    // Ki·ªÉm tra xem c√≥ hi·ªÉn th·ªã QR code kh√¥ng (ch·ªâ hi·ªÉn th·ªã khi tr·∫°ng th√°i l√† CHO_THANH_TOAN)
    const shouldShowQR = status === 'CHO_THANH_TOAN';

    return (
        <div className="payment-page">
            <div className="container">
                <div className="payment-header">
                    <h1>{shouldShowQR ? 'Thanh to√°n' : 'Th√¥ng tin l·ªãch h·∫πn'}</h1>
                    <p>
                        {shouldShowQR
                            ? 'Qu√©t m√£ QR ƒë·ªÉ thanh to√°n l·ªãch kh√°m c·ªßa b·∫°n'
                            : 'Th√¥ng tin chi ti·∫øt l·ªãch h·∫πn c·ªßa b·∫°n'}
                    </p>
                </div>

                <div className="payment-container">
                    <div className="row">
                        {/* QR Code Section - Ch·ªâ hi·ªÉn th·ªã khi tr·∫°ng th√°i CHO_THANH_TOAN */}
                        {shouldShowQR && (
                            <div className="col-lg-5">
                                <div className="qr-section">
                                    <div className="qr-header">
                                        <i className="bi bi-qr-code"></i>
                                        <h3>Qu√©t m√£ QR ƒë·ªÉ thanh to√°n</h3>
                                    </div>

                                    {qr ? (
                                        <div className="qr-code-container">
                                            <img
                                                src={`https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(qr)}`}
                                                alt="QR Code"
                                                className="qr-code-image"
                                            />
                                            <div className="qr-instructions">
                                                <p><i className="bi bi-1-circle-fill"></i> M·ªü ·ª©ng d·ª•ng ng√¢n h√†ng</p>
                                                <p><i className="bi bi-2-circle-fill"></i> Ch·ªçn qu√©t m√£ QR</p>
                                                <p><i className="bi bi-3-circle-fill"></i> X√°c nh·∫≠n thanh to√°n</p>
                                            </div>
                                        </div>
                                    ) : (
                                        <div className="qr-loading">
                                            <i className="bi bi-hourglass-split"></i>
                                            <p>ƒêang t·∫°o m√£ QR...</p>
                                        </div>
                                    )}

                                    {invoiceCode && (
                                        <div className="payment-info-box">
                                            <div className="info-row">
                                                <span>M√£ h√≥a ƒë∆°n:</span>
                                                <strong>{invoiceCode}</strong>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </div>
                        )}

                        {/* Appointment Details Section */}
                        <div className={shouldShowQR ? "col-lg-7" : "col-lg-12"}>
                            <div className="appointment-details">
                                <div className="details-header">
                                    <i className="bi bi-file-text"></i>
                                    <h3>Th√¥ng tin l·ªãch kh√°m</h3>
                                </div>

                                <div className="details-content">
                                    {/* B·ªánh nh√¢n */}
                                    <div className="detail-section">
                                        <h4><i className="bi bi-person-circle"></i> Th√¥ng tin b·ªánh nh√¢n</h4>
                                        <div className="detail-grid">
                                            <div className="detail-item">
                                                <label>H·ªç v√† t√™n:</label>
                                                <span>{patientResponse.fullName}</span>
                                            </div>
                                            <div className="detail-item">
                                                <label>M√£ b·ªánh nh√¢n:</label>
                                                <span>{patientResponse.code}</span>
                                            </div>
                                            <div className="detail-item">
                                                <label>Gi·ªõi t√≠nh:</label>
                                                <span>{patientResponse.gender === 'NAM' ? 'Nam' : 'N·ªØ'}</span>
                                            </div>
                                            <div className="detail-item">
                                                <label>Ng√†y sinh:</label>
                                                <span>{new Date(patientResponse.birth).toLocaleDateString('vi-VN')}</span>
                                            </div>
                                            <div className="detail-item">
                                                <label>S·ªë ƒëi·ªán tho·∫°i:</label>
                                                <span>{patientResponse.phone || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                                            </div>
                                            <div className="detail-item">
                                                <label>ƒê·ªãa ch·ªâ:</label>
                                                <span>{patientResponse.address}</span>
                                            </div>
                                        </div>
                                    </div>

                                    {/* Th√¥ng tin kh√°m */}
                                    <div className="detail-section">
                                        <h4><i className="bi bi-calendar-check"></i> Th√¥ng tin kh√°m</h4>
                                        <div className="detail-grid">
                                            {doctorResponse && (
                                                <>
                                                    <div className="detail-item">
                                                        <label>Lo·∫°i kh√°m:</label>
                                                        <span>Kh√°m v·ªõi b√°c sƒ©</span>
                                                    </div>
                                                    <div className="detail-item">
                                                        <label>B√°c sƒ©:</label>
                                                        <span>{doctorResponse.fullName}</span>
                                                    </div>
                                                    <div className="detail-item">
                                                        <label>Ch·ª©c v·ª•:</label>
                                                        <span>{doctorResponse.position}</span>
                                                    </div>
                                                </>
                                            )}
                                            {healthPlanResponse && (
                                                <>
                                                    <div className="detail-item">
                                                        <label>Lo·∫°i kh√°m:</label>
                                                        <span>G√≥i kh√°m/D·ªãch v·ª•</span>
                                                    </div>
                                                    <div className="detail-item full-width">
                                                        <label>T√™n g√≥i:</label>
                                                        <span>{healthPlanResponse.name}</span>
                                                    </div>
                                                </>
                                            )}
                                            <div className="detail-item">
                                                <label>Ng√†y kh√°m:</label>
                                                <span>{new Date(date).toLocaleDateString('vi-VN')}</span>
                                            </div>
                                            <div className="detail-item">
                                                <label>Gi·ªù kh√°m:</label>
                                                <span>{time.substring(0, 5)}</span>
                                            </div>
                                            {symptoms && (
                                                <div className="detail-item full-width">
                                                    <label>Tri·ªáu ch·ª©ng:</label>
                                                    <span>{symptoms}</span>
                                                </div>
                                            )}
                                        </div>
                                    </div>

                                    {/* Thanh to√°n */}
                                    <div className="detail-section payment-summary">
                                        <h4><i className="bi bi-cash-coin"></i> Thanh to√°n</h4>
                                        <div className="total-amount">
                                            <span>T·ªïng ti·ªÅn:</span>
                                            <strong>{totalAmount.toLocaleString('vi-VN')}ƒë</strong>
                                        </div>
                                        <div className="payment-status">
                                            <span>Tr·∫°ng th√°i:</span>
                                            <span className={`status-badge ${status}`}>
                                                {status === 'CHO_THANH_TOAN' ? 'Ch·ªù thanh to√°n' :
                                                    status === 'DA_THANH_TOAN' ? 'ƒê√£ thanh to√°n' :
                                                        status === 'HUY' || status === 'DA_HUY' ? 'ƒê√£ h·ªßy' :
                                                            status === 'HOAN_THANH' ? 'Ho√†n th√†nh' :
                                                                status}
                                            </span>
                                        </div>
                                        {(status === 'HUY' || status === 'DA_HUY') && (
                                            <div className="cancelled-notice" style={{
                                                marginTop: '15px',
                                                padding: '12px',
                                                background: '#fff3cd',
                                                border: '1px solid #ffc107',
                                                borderRadius: '8px',
                                                color: '#856404'
                                            }}>
                                                <i className="bi bi-exclamation-triangle-fill" style={{ marginRight: '8px' }}></i>
                                                L·ªãch h·∫πn n√†y ƒë√£ b·ªã h·ªßy. Vui l√≤ng ƒë·∫∑t l·ªãch m·ªõi n·∫øu b·∫°n mu·ªën kh√°m.
                                            </div>
                                        )}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default PaymentPage;
